
    .align 2
    .text
    .global dl_esp32p4_s8_mul4d_bchw_w1_1_w2_16_simdmul_unaligned
    .type   dl_esp32p4_s8_mul4d_bchw_w1_1_w2_16_simdmul_unaligned, @function
    #.section .iram1
dl_esp32p4_s8_mul4d_bchw_w1_1_w2_16_simdmul_unaligned:
    .align 2
    esp32p4_push_128_stacks_4r  s0, s1, s8, s9

    # a0: int8_t *output_ptr
    # a2: int8_t *input0_ptr
    # a1: int8_t *input1_ptr  broadcast
    # a3: void *args
    # a4: c_div_x_1
    # a5: c_remainder
    # t3: mul_shift


    lw a4, 64(a3)
    lw a5, 76(a3)
    lw t3, 100(a3)



    esp.ld.128.usar.ip q5, a0, 0 #get output_ptr sar_byte
    esp.movx.r.sar.bytes s1

    bltz a4, dl_tie718_s8_unaligned_mul2d_11c_small_remainder__ # channel < 16


    esp.ld.128.usar.ip q0, a2, 16
    #esp.ld.128.usar.ip q3, a1, 16
    esp.ld.128.usar.ip q1, a2, 16

    beqz s1, dl_tie718_s8_unaligned_mul2d_11c_0__
    li t0, 8
    beq s1, t0, dl_tie718_s8_unaligned_mul2d_11c_1__


    add t0, a4, x0
    blez t0, 1f
    0:
        esp.zero.qacc
        esp.src.q.qup q2, q0, q1

        #esp.ld.128.usar.ip q4, a1, 16
        #esp.src.q.qup q5, q3, q4
        esp.vldbc.8.ip q5, a1, 0

        esp.vmulas.s8.qacc q2, q5
        esp.srcmb.s8.qacc q2, t3, 1
        esp.ld.128.usar.ip q1, a2, 16
        esp32p4_s8_32b_unaligned_vector_store q2, a0, s1
        addi t0, t0, -1
        bgtz t0, 0b
    1:

    addi a2, a2, -16
    add a2, a2, a5
    esp.zero.qacc
    esp.movx.r.sar.bytes t6 #input0 sar
    esp.src.q.qup q2, q0, q1

    #esp.ld.128.usar.xp q4, a1, a5
    #esp.movx.r.sar.bytes s0 #input1 sar
    #esp.src.q.qup q5, q3, q4
    esp.vldbc.8.ip q5, a1, 0
    addi s0, a1, 0

    esp.vmulas.s8.qacc q2, q5
    esp.srcmb.s8.qacc q2, t3, 1
    esp32p4_s8_32b_unaligned_vector_store q2, a0, s1
    j dl_tie718_s8_unaligned_mul2d_11c_remainder__test

dl_tie718_s8_unaligned_mul2d_11c_0__:

    add t0, a4, x0
    blez t0, 3f
    2:
        esp.zero.qacc
        esp.src.q.qup q2, q0, q1

        #esp.ld.128.usar.ip q4, a1, 16
        #esp.src.q.qup q5, q3, q4
        esp.vldbc.8.ip q5, a1, 0

        esp.vmulas.s8.qacc q2, q5
        esp.srcmb.s8.qacc q2, t3, 1
        esp.ld.128.usar.ip q1, a2, 16
        esp.vst.128.ip q2, a0, 16
        addi t0, t0, -1
        bgtz t0, 2b
    3:

    addi a2, a2, -16
    add a2, a2, a5
    esp.zero.qacc
    esp.movx.r.sar.bytes t6 #input0 sar
    esp.src.q.qup q2, q0, q1

    #esp.ld.128.usar.xp q4, a1, a5
    #esp.movx.r.sar.bytes s0 #input1 sar
    #esp.src.q.qup q5, q3, q4
    esp.vldbc.8.ip q5, a1, 0
    addi s0, a1, 0

    esp.vmulas.s8.qacc q2, q5
    esp.srcmb.s8.qacc q2, t3, 1
    esp.vst.128.ip q2, a0, 16
    j dl_tie718_s8_unaligned_mul2d_11c_remainder__test

dl_tie718_s8_unaligned_mul2d_11c_1__:

    add t0, a4, x0
    blez t0, 5f
    4:
        esp.zero.qacc
        esp.src.q.qup q2, q0, q1

        #esp.ld.128.usar.ip q4, a1, 16
        #esp.src.q.qup q5, q3, q4
        esp.vldbc.8.ip q5, a1, 0

        esp.vmulas.s8.qacc q2, q5
        esp.srcmb.s8.qacc q2, t3, 1
        esp.ld.128.usar.ip q1, a2, 16
        esp32p4_s8_64b_unaligned_vector_store q2, a0
        addi t0, t0, -1
        bgtz t0, 4b
    5:

    addi a2, a2, -16
    add a2, a2, a5
    esp.zero.qacc
    esp.movx.r.sar.bytes t6 #input0 sar
    esp.src.q.qup q2, q0, q1

    #esp.ld.128.usar.xp q4, a1, a5
    #esp.movx.r.sar.bytes s0 #input1 sar
    #esp.src.q.qup q5, q3, q4
    esp.vldbc.8.ip q5, a1, 0
    addi s0, a1, 0

    esp.vmulas.s8.qacc q2, q5
    esp.srcmb.s8.qacc q2, t3, 1
    esp32p4_s8_64b_unaligned_vector_store q2, a0

    j dl_tie718_s8_unaligned_mul2d_11c_remainder__test

dl_tie718_s8_unaligned_mul2d_11c_small_remainder__:
    esp.ld.128.usar.xp q0, a2, a5
    esp.movx.r.sar.bytes t6

    #esp.ld.128.usar.xp q3, a1, a5
    #esp.movx.r.sar.bytes s0
    esp.vldbc.8.ip q5, a1, 0


dl_tie718_s8_unaligned_mul2d_11c_remainder__test:


    beqz a5, dl_esp32p4_s8_mul4d_bchw_w1_1_w2_16_simdmul_unaligned_end__

    esp.ld.128.usar.ip q1, a2, 0
    esp.movx.w.sar.bytes t6
    esp.src.q q2, q0, q1

    #esp.ld.128.usar.ip q4, a1, 0
    #esp.movx.w.sar.bytes s0
    #esp.src.q q5, q3, q4
    esp.vldbc.8.ip q5, a1, 0
    addi s0, a1, 0

    esp.zero.qacc
    esp.vmulas.s8.qacc q2, q5
    esp.srcmb.s8.qacc q2, t3, 1

    # esp32p4_s8_32b_unaligned_vector_store q2, a0, s1
    dl_esp32p4_s8_store_remainder q2, t4, t6, s0, s1, t0, a0, a5

dl_esp32p4_s8_mul4d_bchw_w1_1_w2_16_simdmul_unaligned_end__:
    esp32p4_pop_128_stacks_4r  s0, s1, s8, s9
    ret
